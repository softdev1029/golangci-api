// Code generated by genservices. DO NOT EDIT.
package repoanalysis

import (
	"context"
	"encoding/json"
	"net/http"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/golangci/golangci-api/pkg/session"
	"github.com/golangci/golangci-api/pkg/transportutil"
	"github.com/golangci/golangci-shared/pkg/apperrors"
	"github.com/golangci/golangci-shared/pkg/logutil"
	"github.com/gorilla/mux"
	"github.com/jinzhu/gorm"
	"github.com/pkg/errors"
)

func RegisterHandlers(r *mux.Router, svc Service, log logutil.Log, et apperrors.Tracker, db *gorm.DB, sf *session.Factory) {

	hGetStatus := httptransport.NewServer(
		makeGetStatusEndpoint(svc, log),
		decodeGetStatusRequest,
		encodeGetStatusResponse,

		httptransport.ServerBefore(transportutil.MakeStoreAnonymousRequestContext(log, et, db)),

		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("GET").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes").Handler(hGetStatus)

	hGet := httptransport.NewServer(
		makeGetEndpoint(svc, log),
		decodeGetRequest,
		encodeGetResponse,

		httptransport.ServerBefore(transportutil.MakeStoreAnonymousRequestContext(log, et, db)),

		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("GET").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes/{analysisguid}").Handler(hGet)

	hUpdate := httptransport.NewServer(
		makeUpdateEndpoint(svc, log),
		decodeUpdateRequest,
		encodeUpdateResponse,

		httptransport.ServerBefore(transportutil.MakeStoreAnonymousRequestContext(log, et, db)),

		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("PUT").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes/{analysisguid}").Handler(hUpdate)

}

func decodeGetStatusRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request GetStatusRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeGetStatusResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")
	if err := transportutil.GetContextError(ctx); err != nil {
		wrappedResp := struct {
			Error *transportutil.Error
		}{
			Error: transportutil.MakeError(err),
		}
		w.WriteHeader(wrappedResp.Error.HTTPCode)
		return json.NewEncoder(w).Encode(wrappedResp)
	}

	resp := response.(GetStatusResponse)
	wrappedResp := struct {
		Error *transportutil.Error
		GetStatusResponse
	}{
		GetStatusResponse: resp,
	}

	if resp.err != nil {
		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}

func decodeGetRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request GetRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeGetResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")
	if err := transportutil.GetContextError(ctx); err != nil {
		wrappedResp := struct {
			Error *transportutil.Error
		}{
			Error: transportutil.MakeError(err),
		}
		w.WriteHeader(wrappedResp.Error.HTTPCode)
		return json.NewEncoder(w).Encode(wrappedResp)
	}

	resp := response.(GetResponse)
	wrappedResp := struct {
		Error *transportutil.Error
		GetResponse
	}{
		GetResponse: resp,
	}

	if resp.err != nil {
		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}

func decodeUpdateRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request UpdateRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeUpdateResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")
	if err := transportutil.GetContextError(ctx); err != nil {
		wrappedResp := struct {
			Error *transportutil.Error
		}{
			Error: transportutil.MakeError(err),
		}
		w.WriteHeader(wrappedResp.Error.HTTPCode)
		return json.NewEncoder(w).Encode(wrappedResp)
	}

	resp := response.(UpdateResponse)
	wrappedResp := struct {
		Error *transportutil.Error
		UpdateResponse
	}{
		UpdateResponse: resp,
	}

	if resp.err != nil {
		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}
