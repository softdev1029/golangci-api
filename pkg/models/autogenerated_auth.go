// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set AuthQuerySet

// AuthQuerySet is an queryset type for Auth
type AuthQuerySet struct {
	db *gorm.DB
}

// NewAuthQuerySet constructs new AuthQuerySet
func NewAuthQuerySet(db *gorm.DB) AuthQuerySet {
	return AuthQuerySet{
		db: db.Model(&Auth{}),
	}
}

func (qs AuthQuerySet) w(db *gorm.DB) AuthQuerySet {
	return NewAuthQuerySet(db)
}

// AccessTokenEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) AccessTokenEq(accessToken string) AuthQuerySet {
	return qs.w(qs.db.Where("access_token = ?", accessToken))
}

// AccessTokenIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) AccessTokenIn(accessToken ...string) AuthQuerySet {
	if len(accessToken) == 0 {
		qs.db.AddError(errors.New("must at least pass one accessToken in AccessTokenIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("access_token IN (?)", accessToken))
}

// AccessTokenNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) AccessTokenNe(accessToken string) AuthQuerySet {
	return qs.w(qs.db.Where("access_token != ?", accessToken))
}

// AccessTokenNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) AccessTokenNotIn(accessToken ...string) AuthQuerySet {
	if len(accessToken) == 0 {
		qs.db.AddError(errors.New("must at least pass one accessToken in AccessTokenNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("access_token NOT IN (?)", accessToken))
}

// All is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) All(ret *[]Auth) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Auth) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) CreatedAtEq(createdAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) CreatedAtGt(createdAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) CreatedAtGte(createdAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) CreatedAtLt(createdAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) CreatedAtLte(createdAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) CreatedAtNe(createdAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Auth) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) Delete() error {
	return qs.db.Delete(Auth{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtEq(deletedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtGt(deletedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtGte(deletedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtIsNotNull() AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtIsNull() AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtLt(deletedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtLte(deletedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) DeletedAtNe(deletedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) GetUpdater() AuthUpdater {
	return NewAuthUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDEq(ID uint) AuthQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDGt(ID uint) AuthQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDGte(ID uint) AuthQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDIn(ID ...uint) AuthQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDLt(ID uint) AuthQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDLte(ID uint) AuthQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDNe(ID uint) AuthQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) IDNotIn(ID ...uint) AuthQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) Limit(limit int) AuthQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// LoginEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) LoginEq(login string) AuthQuerySet {
	return qs.w(qs.db.Where("login = ?", login))
}

// LoginIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) LoginIn(login ...string) AuthQuerySet {
	if len(login) == 0 {
		qs.db.AddError(errors.New("must at least pass one login in LoginIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("login IN (?)", login))
}

// LoginNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) LoginNe(login string) AuthQuerySet {
	return qs.w(qs.db.Where("login != ?", login))
}

// LoginNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) LoginNotIn(login ...string) AuthQuerySet {
	if len(login) == 0 {
		qs.db.AddError(errors.New("must at least pass one login in LoginNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("login NOT IN (?)", login))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) Offset(offset int) AuthQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs AuthQuerySet) One(ret *Auth) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderAscByCreatedAt() AuthQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderAscByDeletedAt() AuthQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderAscByID() AuthQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByProviderUserID is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderAscByProviderUserID() AuthQuerySet {
	return qs.w(qs.db.Order("provider_user_id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderAscByUpdatedAt() AuthQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderAscByUserID() AuthQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderDescByCreatedAt() AuthQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderDescByDeletedAt() AuthQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderDescByID() AuthQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByProviderUserID is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderDescByProviderUserID() AuthQuerySet {
	return qs.w(qs.db.Order("provider_user_id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderDescByUpdatedAt() AuthQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) OrderDescByUserID() AuthQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// PrivateAccessTokenEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) PrivateAccessTokenEq(privateAccessToken string) AuthQuerySet {
	return qs.w(qs.db.Where("private_access_token = ?", privateAccessToken))
}

// PrivateAccessTokenIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) PrivateAccessTokenIn(privateAccessToken ...string) AuthQuerySet {
	if len(privateAccessToken) == 0 {
		qs.db.AddError(errors.New("must at least pass one privateAccessToken in PrivateAccessTokenIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("private_access_token IN (?)", privateAccessToken))
}

// PrivateAccessTokenNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) PrivateAccessTokenNe(privateAccessToken string) AuthQuerySet {
	return qs.w(qs.db.Where("private_access_token != ?", privateAccessToken))
}

// PrivateAccessTokenNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) PrivateAccessTokenNotIn(privateAccessToken ...string) AuthQuerySet {
	if len(privateAccessToken) == 0 {
		qs.db.AddError(errors.New("must at least pass one privateAccessToken in PrivateAccessTokenNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("private_access_token NOT IN (?)", privateAccessToken))
}

// ProviderEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderEq(provider string) AuthQuerySet {
	return qs.w(qs.db.Where("provider = ?", provider))
}

// ProviderIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderIn(provider ...string) AuthQuerySet {
	if len(provider) == 0 {
		qs.db.AddError(errors.New("must at least pass one provider in ProviderIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider IN (?)", provider))
}

// ProviderNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderNe(provider string) AuthQuerySet {
	return qs.w(qs.db.Where("provider != ?", provider))
}

// ProviderNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderNotIn(provider ...string) AuthQuerySet {
	if len(provider) == 0 {
		qs.db.AddError(errors.New("must at least pass one provider in ProviderNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider NOT IN (?)", provider))
}

// ProviderUserIDEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDEq(providerUserID uint64) AuthQuerySet {
	return qs.w(qs.db.Where("provider_user_id = ?", providerUserID))
}

// ProviderUserIDGt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDGt(providerUserID uint64) AuthQuerySet {
	return qs.w(qs.db.Where("provider_user_id > ?", providerUserID))
}

// ProviderUserIDGte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDGte(providerUserID uint64) AuthQuerySet {
	return qs.w(qs.db.Where("provider_user_id >= ?", providerUserID))
}

// ProviderUserIDIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDIn(providerUserID ...uint64) AuthQuerySet {
	if len(providerUserID) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerUserID in ProviderUserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_user_id IN (?)", providerUserID))
}

// ProviderUserIDLt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDLt(providerUserID uint64) AuthQuerySet {
	return qs.w(qs.db.Where("provider_user_id < ?", providerUserID))
}

// ProviderUserIDLte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDLte(providerUserID uint64) AuthQuerySet {
	return qs.w(qs.db.Where("provider_user_id <= ?", providerUserID))
}

// ProviderUserIDNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDNe(providerUserID uint64) AuthQuerySet {
	return qs.w(qs.db.Where("provider_user_id != ?", providerUserID))
}

// ProviderUserIDNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) ProviderUserIDNotIn(providerUserID ...uint64) AuthQuerySet {
	if len(providerUserID) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerUserID in ProviderUserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_user_id NOT IN (?)", providerUserID))
}

// RawDataEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) RawDataEq(rawData []byte) AuthQuerySet {
	return qs.w(qs.db.Where("raw_data = ?", rawData))
}

// RawDataIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) RawDataIn(rawData ...[]byte) AuthQuerySet {
	if len(rawData) == 0 {
		qs.db.AddError(errors.New("must at least pass one rawData in RawDataIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("raw_data IN (?)", rawData))
}

// RawDataNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) RawDataNe(rawData []byte) AuthQuerySet {
	return qs.w(qs.db.Where("raw_data != ?", rawData))
}

// RawDataNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) RawDataNotIn(rawData ...[]byte) AuthQuerySet {
	if len(rawData) == 0 {
		qs.db.AddError(errors.New("must at least pass one rawData in RawDataNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("raw_data NOT IN (?)", rawData))
}

// SetAccessToken is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetAccessToken(accessToken string) AuthUpdater {
	u.fields[string(AuthDBSchema.AccessToken)] = accessToken
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetCreatedAt(createdAt time.Time) AuthUpdater {
	u.fields[string(AuthDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetDeletedAt(deletedAt *time.Time) AuthUpdater {
	u.fields[string(AuthDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetID(ID uint) AuthUpdater {
	u.fields[string(AuthDBSchema.ID)] = ID
	return u
}

// SetLogin is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetLogin(login string) AuthUpdater {
	u.fields[string(AuthDBSchema.Login)] = login
	return u
}

// SetPrivateAccessToken is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetPrivateAccessToken(privateAccessToken string) AuthUpdater {
	u.fields[string(AuthDBSchema.PrivateAccessToken)] = privateAccessToken
	return u
}

// SetProvider is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetProvider(provider string) AuthUpdater {
	u.fields[string(AuthDBSchema.Provider)] = provider
	return u
}

// SetProviderUserID is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetProviderUserID(providerUserID uint64) AuthUpdater {
	u.fields[string(AuthDBSchema.ProviderUserID)] = providerUserID
	return u
}

// SetRawData is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetRawData(rawData []byte) AuthUpdater {
	u.fields[string(AuthDBSchema.RawData)] = rawData
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetUpdatedAt(updatedAt time.Time) AuthUpdater {
	u.fields[string(AuthDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u AuthUpdater) SetUserID(userID uint) AuthUpdater {
	u.fields[string(AuthDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u AuthUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u AuthUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UpdatedAtEq(updatedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UpdatedAtGt(updatedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UpdatedAtGte(updatedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UpdatedAtLt(updatedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UpdatedAtLte(updatedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UpdatedAtNe(updatedAt time.Time) AuthQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDEq(userID uint) AuthQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDGt(userID uint) AuthQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDGte(userID uint) AuthQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDIn(userID ...uint) AuthQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDLt(userID uint) AuthQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDLte(userID uint) AuthQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDNe(userID uint) AuthQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs AuthQuerySet) UserIDNotIn(userID ...uint) AuthQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// ===== END of query set AuthQuerySet

// ===== BEGIN of Auth modifiers

// AuthDBSchemaField describes database schema field. It requires for method 'Update'
type AuthDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f AuthDBSchemaField) String() string {
	return string(f)
}

// AuthDBSchema stores db field names of Auth
var AuthDBSchema = struct {
	ID                 AuthDBSchemaField
	CreatedAt          AuthDBSchemaField
	UpdatedAt          AuthDBSchemaField
	DeletedAt          AuthDBSchemaField
	AccessToken        AuthDBSchemaField
	PrivateAccessToken AuthDBSchemaField
	RawData            AuthDBSchemaField
	UserID             AuthDBSchemaField
	Provider           AuthDBSchemaField
	ProviderUserID     AuthDBSchemaField
	Login              AuthDBSchemaField
}{

	ID:                 AuthDBSchemaField("id"),
	CreatedAt:          AuthDBSchemaField("created_at"),
	UpdatedAt:          AuthDBSchemaField("updated_at"),
	DeletedAt:          AuthDBSchemaField("deleted_at"),
	AccessToken:        AuthDBSchemaField("access_token"),
	PrivateAccessToken: AuthDBSchemaField("private_access_token"),
	RawData:            AuthDBSchemaField("raw_data"),
	UserID:             AuthDBSchemaField("user_id"),
	Provider:           AuthDBSchemaField("provider"),
	ProviderUserID:     AuthDBSchemaField("provider_user_id"),
	Login:              AuthDBSchemaField("login"),
}

// Update updates Auth fields by primary key
// nolint: dupl
func (o *Auth) Update(db *gorm.DB, fields ...AuthDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                   o.ID,
		"created_at":           o.CreatedAt,
		"updated_at":           o.UpdatedAt,
		"deleted_at":           o.DeletedAt,
		"access_token":         o.AccessToken,
		"private_access_token": o.PrivateAccessToken,
		"raw_data":             o.RawData,
		"user_id":              o.UserID,
		"provider":             o.Provider,
		"provider_user_id":     o.ProviderUserID,
		"login":                o.Login,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Auth %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// AuthUpdater is an Auth updates manager
type AuthUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewAuthUpdater creates new Auth updater
// nolint: dupl
func NewAuthUpdater(db *gorm.DB) AuthUpdater {
	return AuthUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Auth{}),
	}
}

// ===== END of Auth modifiers

// ===== END of all query sets
