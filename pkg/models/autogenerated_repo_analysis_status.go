// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set RepoAnalysisStatusQuerySet

// RepoAnalysisStatusQuerySet is an queryset type for RepoAnalysisStatus
type RepoAnalysisStatusQuerySet struct {
	db *gorm.DB
}

// NewRepoAnalysisStatusQuerySet constructs new RepoAnalysisStatusQuerySet
func NewRepoAnalysisStatusQuerySet(db *gorm.DB) RepoAnalysisStatusQuerySet {
	return RepoAnalysisStatusQuerySet{
		db: db.Model(&RepoAnalysisStatus{}),
	}
}

func (qs RepoAnalysisStatusQuerySet) w(db *gorm.DB) RepoAnalysisStatusQuerySet {
	return NewRepoAnalysisStatusQuerySet(db)
}

// ActiveEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) ActiveEq(active bool) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("active = ?", active))
}

// ActiveIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) ActiveIn(active ...bool) RepoAnalysisStatusQuerySet {
	if len(active) == 0 {
		qs.db.AddError(errors.New("must at least pass one active in ActiveIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("active IN (?)", active))
}

// ActiveNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) ActiveNe(active bool) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("active != ?", active))
}

// ActiveNotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) ActiveNotIn(active ...bool) RepoAnalysisStatusQuerySet {
	if len(active) == 0 {
		qs.db.AddError(errors.New("must at least pass one active in ActiveNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("active NOT IN (?)", active))
}

// All is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) All(ret *[]RepoAnalysisStatus) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *RepoAnalysisStatus) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) CreatedAtEq(createdAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) CreatedAtGt(createdAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) CreatedAtGte(createdAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) CreatedAtLt(createdAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) CreatedAtLte(createdAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) CreatedAtNe(createdAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// DefaultBranchEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DefaultBranchEq(defaultBranch string) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("default_branch = ?", defaultBranch))
}

// DefaultBranchIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DefaultBranchIn(defaultBranch ...string) RepoAnalysisStatusQuerySet {
	if len(defaultBranch) == 0 {
		qs.db.AddError(errors.New("must at least pass one defaultBranch in DefaultBranchIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("default_branch IN (?)", defaultBranch))
}

// DefaultBranchNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DefaultBranchNe(defaultBranch string) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("default_branch != ?", defaultBranch))
}

// DefaultBranchNotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DefaultBranchNotIn(defaultBranch ...string) RepoAnalysisStatusQuerySet {
	if len(defaultBranch) == 0 {
		qs.db.AddError(errors.New("must at least pass one defaultBranch in DefaultBranchNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("default_branch NOT IN (?)", defaultBranch))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *RepoAnalysisStatus) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) Delete() error {
	return qs.db.Delete(RepoAnalysisStatus{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtEq(deletedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtGt(deletedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtGte(deletedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtIsNotNull() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtIsNull() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtLt(deletedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtLte(deletedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) DeletedAtNe(deletedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) GetUpdater() RepoAnalysisStatusUpdater {
	return NewRepoAnalysisStatusUpdater(qs.db)
}

// HasPendingChangesEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) HasPendingChangesEq(hasPendingChanges bool) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("has_pending_changes = ?", hasPendingChanges))
}

// HasPendingChangesIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) HasPendingChangesIn(hasPendingChanges ...bool) RepoAnalysisStatusQuerySet {
	if len(hasPendingChanges) == 0 {
		qs.db.AddError(errors.New("must at least pass one hasPendingChanges in HasPendingChangesIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("has_pending_changes IN (?)", hasPendingChanges))
}

// HasPendingChangesNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) HasPendingChangesNe(hasPendingChanges bool) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("has_pending_changes != ?", hasPendingChanges))
}

// HasPendingChangesNotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) HasPendingChangesNotIn(hasPendingChanges ...bool) RepoAnalysisStatusQuerySet {
	if len(hasPendingChanges) == 0 {
		qs.db.AddError(errors.New("must at least pass one hasPendingChanges in HasPendingChangesNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("has_pending_changes NOT IN (?)", hasPendingChanges))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDEq(ID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDGt(ID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDGte(ID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDIn(ID ...uint) RepoAnalysisStatusQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDLt(ID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDLte(ID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDNe(ID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) IDNotIn(ID ...uint) RepoAnalysisStatusQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// LastAnalyzedAtEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedAtEq(lastAnalyzedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_at = ?", lastAnalyzedAt))
}

// LastAnalyzedAtGt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedAtGt(lastAnalyzedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_at > ?", lastAnalyzedAt))
}

// LastAnalyzedAtGte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedAtGte(lastAnalyzedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_at >= ?", lastAnalyzedAt))
}

// LastAnalyzedAtLt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedAtLt(lastAnalyzedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_at < ?", lastAnalyzedAt))
}

// LastAnalyzedAtLte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedAtLte(lastAnalyzedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_at <= ?", lastAnalyzedAt))
}

// LastAnalyzedAtNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedAtNe(lastAnalyzedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_at != ?", lastAnalyzedAt))
}

// LastAnalyzedLintersVersionEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedLintersVersionEq(lastAnalyzedLintersVersion string) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_linters_version = ?", lastAnalyzedLintersVersion))
}

// LastAnalyzedLintersVersionIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedLintersVersionIn(lastAnalyzedLintersVersion ...string) RepoAnalysisStatusQuerySet {
	if len(lastAnalyzedLintersVersion) == 0 {
		qs.db.AddError(errors.New("must at least pass one lastAnalyzedLintersVersion in LastAnalyzedLintersVersionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("last_analyzed_linters_version IN (?)", lastAnalyzedLintersVersion))
}

// LastAnalyzedLintersVersionNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedLintersVersionNe(lastAnalyzedLintersVersion string) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("last_analyzed_linters_version != ?", lastAnalyzedLintersVersion))
}

// LastAnalyzedLintersVersionNotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) LastAnalyzedLintersVersionNotIn(lastAnalyzedLintersVersion ...string) RepoAnalysisStatusQuerySet {
	if len(lastAnalyzedLintersVersion) == 0 {
		qs.db.AddError(errors.New("must at least pass one lastAnalyzedLintersVersion in LastAnalyzedLintersVersionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("last_analyzed_linters_version NOT IN (?)", lastAnalyzedLintersVersion))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) Limit(limit int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) Offset(offset int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs RepoAnalysisStatusQuerySet) One(ret *RepoAnalysisStatus) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderAscByCreatedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderAscByDeletedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderAscByID() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByLastAnalyzedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderAscByLastAnalyzedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("last_analyzed_at ASC"))
}

// OrderAscByRepoID is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderAscByRepoID() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("repo_id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderAscByUpdatedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByVersion is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderAscByVersion() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("version ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderDescByCreatedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderDescByDeletedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderDescByID() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByLastAnalyzedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderDescByLastAnalyzedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("last_analyzed_at DESC"))
}

// OrderDescByRepoID is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderDescByRepoID() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("repo_id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderDescByUpdatedAt() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByVersion is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) OrderDescByVersion() RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Order("version DESC"))
}

// PendingCommitSHAEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) PendingCommitSHAEq(pendingCommitSHA string) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("pending_commit_sha = ?", pendingCommitSHA))
}

// PendingCommitSHAIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) PendingCommitSHAIn(pendingCommitSHA ...string) RepoAnalysisStatusQuerySet {
	if len(pendingCommitSHA) == 0 {
		qs.db.AddError(errors.New("must at least pass one pendingCommitSHA in PendingCommitSHAIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("pending_commit_sha IN (?)", pendingCommitSHA))
}

// PendingCommitSHANe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) PendingCommitSHANe(pendingCommitSHA string) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("pending_commit_sha != ?", pendingCommitSHA))
}

// PendingCommitSHANotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) PendingCommitSHANotIn(pendingCommitSHA ...string) RepoAnalysisStatusQuerySet {
	if len(pendingCommitSHA) == 0 {
		qs.db.AddError(errors.New("must at least pass one pendingCommitSHA in PendingCommitSHANotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("pending_commit_sha NOT IN (?)", pendingCommitSHA))
}

// RepoIDEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDEq(repoID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("repo_id = ?", repoID))
}

// RepoIDGt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDGt(repoID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("repo_id > ?", repoID))
}

// RepoIDGte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDGte(repoID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("repo_id >= ?", repoID))
}

// RepoIDIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDIn(repoID ...uint) RepoAnalysisStatusQuerySet {
	if len(repoID) == 0 {
		qs.db.AddError(errors.New("must at least pass one repoID in RepoIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("repo_id IN (?)", repoID))
}

// RepoIDLt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDLt(repoID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("repo_id < ?", repoID))
}

// RepoIDLte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDLte(repoID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("repo_id <= ?", repoID))
}

// RepoIDNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDNe(repoID uint) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("repo_id != ?", repoID))
}

// RepoIDNotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) RepoIDNotIn(repoID ...uint) RepoAnalysisStatusQuerySet {
	if len(repoID) == 0 {
		qs.db.AddError(errors.New("must at least pass one repoID in RepoIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("repo_id NOT IN (?)", repoID))
}

// SetActive is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetActive(active bool) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.Active)] = active
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetCreatedAt(createdAt time.Time) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDefaultBranch is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetDefaultBranch(defaultBranch string) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.DefaultBranch)] = defaultBranch
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetDeletedAt(deletedAt *time.Time) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetHasPendingChanges is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetHasPendingChanges(hasPendingChanges bool) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.HasPendingChanges)] = hasPendingChanges
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetID(ID uint) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.ID)] = ID
	return u
}

// SetLastAnalyzedAt is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetLastAnalyzedAt(lastAnalyzedAt time.Time) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.LastAnalyzedAt)] = lastAnalyzedAt
	return u
}

// SetLastAnalyzedLintersVersion is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetLastAnalyzedLintersVersion(lastAnalyzedLintersVersion string) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.LastAnalyzedLintersVersion)] = lastAnalyzedLintersVersion
	return u
}

// SetPendingCommitSHA is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetPendingCommitSHA(pendingCommitSHA string) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.PendingCommitSHA)] = pendingCommitSHA
	return u
}

// SetRepoID is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetRepoID(repoID uint) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.RepoID)] = repoID
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetUpdatedAt(updatedAt time.Time) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetVersion is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) SetVersion(version int) RepoAnalysisStatusUpdater {
	u.fields[string(RepoAnalysisStatusDBSchema.Version)] = version
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u RepoAnalysisStatusUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) UpdatedAtEq(updatedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) UpdatedAtGt(updatedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) UpdatedAtGte(updatedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) UpdatedAtLt(updatedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) UpdatedAtLte(updatedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) UpdatedAtNe(updatedAt time.Time) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// VersionEq is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionEq(version int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("version = ?", version))
}

// VersionGt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionGt(version int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("version > ?", version))
}

// VersionGte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionGte(version int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("version >= ?", version))
}

// VersionIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionIn(version ...int) RepoAnalysisStatusQuerySet {
	if len(version) == 0 {
		qs.db.AddError(errors.New("must at least pass one version in VersionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("version IN (?)", version))
}

// VersionLt is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionLt(version int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("version < ?", version))
}

// VersionLte is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionLte(version int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("version <= ?", version))
}

// VersionNe is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionNe(version int) RepoAnalysisStatusQuerySet {
	return qs.w(qs.db.Where("version != ?", version))
}

// VersionNotIn is an autogenerated method
// nolint: dupl
func (qs RepoAnalysisStatusQuerySet) VersionNotIn(version ...int) RepoAnalysisStatusQuerySet {
	if len(version) == 0 {
		qs.db.AddError(errors.New("must at least pass one version in VersionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("version NOT IN (?)", version))
}

// ===== END of query set RepoAnalysisStatusQuerySet

// ===== BEGIN of RepoAnalysisStatus modifiers

// RepoAnalysisStatusDBSchemaField describes database schema field. It requires for method 'Update'
type RepoAnalysisStatusDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f RepoAnalysisStatusDBSchemaField) String() string {
	return string(f)
}

// RepoAnalysisStatusDBSchema stores db field names of RepoAnalysisStatus
var RepoAnalysisStatusDBSchema = struct {
	ID                         RepoAnalysisStatusDBSchemaField
	CreatedAt                  RepoAnalysisStatusDBSchemaField
	UpdatedAt                  RepoAnalysisStatusDBSchemaField
	DeletedAt                  RepoAnalysisStatusDBSchemaField
	RepoID                     RepoAnalysisStatusDBSchemaField
	LastAnalyzedAt             RepoAnalysisStatusDBSchemaField
	LastAnalyzedLintersVersion RepoAnalysisStatusDBSchemaField
	HasPendingChanges          RepoAnalysisStatusDBSchemaField
	PendingCommitSHA           RepoAnalysisStatusDBSchemaField
	Version                    RepoAnalysisStatusDBSchemaField
	DefaultBranch              RepoAnalysisStatusDBSchemaField
	Active                     RepoAnalysisStatusDBSchemaField
}{

	ID:                         RepoAnalysisStatusDBSchemaField("id"),
	CreatedAt:                  RepoAnalysisStatusDBSchemaField("created_at"),
	UpdatedAt:                  RepoAnalysisStatusDBSchemaField("updated_at"),
	DeletedAt:                  RepoAnalysisStatusDBSchemaField("deleted_at"),
	RepoID:                     RepoAnalysisStatusDBSchemaField("repo_id"),
	LastAnalyzedAt:             RepoAnalysisStatusDBSchemaField("last_analyzed_at"),
	LastAnalyzedLintersVersion: RepoAnalysisStatusDBSchemaField("last_analyzed_linters_version"),
	HasPendingChanges:          RepoAnalysisStatusDBSchemaField("has_pending_changes"),
	PendingCommitSHA:           RepoAnalysisStatusDBSchemaField("pending_commit_sha"),
	Version:                    RepoAnalysisStatusDBSchemaField("version"),
	DefaultBranch:              RepoAnalysisStatusDBSchemaField("default_branch"),
	Active:                     RepoAnalysisStatusDBSchemaField("active"),
}

// Update updates RepoAnalysisStatus fields by primary key
// nolint: dupl
func (o *RepoAnalysisStatus) Update(db *gorm.DB, fields ...RepoAnalysisStatusDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                            o.ID,
		"created_at":                    o.CreatedAt,
		"updated_at":                    o.UpdatedAt,
		"deleted_at":                    o.DeletedAt,
		"repo_id":                       o.RepoID,
		"last_analyzed_at":              o.LastAnalyzedAt,
		"last_analyzed_linters_version": o.LastAnalyzedLintersVersion,
		"has_pending_changes":           o.HasPendingChanges,
		"pending_commit_sha":            o.PendingCommitSHA,
		"version":                       o.Version,
		"default_branch":                o.DefaultBranch,
		"active":                        o.Active,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update RepoAnalysisStatus %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// RepoAnalysisStatusUpdater is an RepoAnalysisStatus updates manager
type RepoAnalysisStatusUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewRepoAnalysisStatusUpdater creates new RepoAnalysisStatus updater
// nolint: dupl
func NewRepoAnalysisStatusUpdater(db *gorm.DB) RepoAnalysisStatusUpdater {
	return RepoAnalysisStatusUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&RepoAnalysisStatus{}),
	}
}

// ===== END of RepoAnalysisStatus modifiers

// ===== END of all query sets
